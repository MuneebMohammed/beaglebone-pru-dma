From ee474054d923cc5222a75839c035df3e6d34472b Mon Sep 17 00:00:00 2001
From: Maciej Sobkowski <maciej@sobkow.ski>
Date: Wed, 16 Aug 2017 17:01:45 +0200
Subject: [PATCH 3/3] Add parsing of PRU_DMA resource type to pru_rproc

DMA buffers are set up based on resource table from firmware during PRU
configuration, before boot. Add new custom resource type which will
represent this resource type in the table.

Signed-off-by: Maciej Sobkowski <maciej@sobkow.ski>
---
 drivers/remoteproc/pru_rproc.c | 67 ++++++++++++++++++++++++++++++++++++++++++
 drivers/remoteproc/pru_rproc.h |  3 +-
 2 files changed, 69 insertions(+), 1 deletion(-)

diff --git a/drivers/remoteproc/pru_rproc.c b/drivers/remoteproc/pru_rproc.c
index e8c1a800cc06..aae7387ff8ff 100644
--- a/drivers/remoteproc/pru_rproc.c
+++ b/drivers/remoteproc/pru_rproc.c
@@ -23,6 +23,7 @@
 #include <linux/of_device.h>
 #include <linux/remoteproc.h>
 #include <linux/pruss.h>
+#include <linux/pru_dma.h>
 
 #include "remoteproc_internal.h"
 #include "pruss.h"
@@ -621,6 +622,67 @@ static int pru_handle_custom_intrmap(struct rproc *rproc,
 	return ret;
 }
 
+/*
+ * parse the custom DMA channel
+ */
+static int pru_handle_custom_dma_channels(struct rproc *rproc,
+				     struct fw_rsc_custom_dma_ch *dma_rsc)
+{
+	struct device *dev = rproc->dev.parent;
+	int i;
+	uint32_t buf_addr;
+	uint32_t buf_size;
+	uint8_t notify_completion;
+	struct pru_dma *pru_dma;
+	int ret;
+
+	if (dma_rsc->version != 0) {
+		dev_err(dev, "Only custom dma resource version 0 supported\n");
+		return -EINVAL;
+	}
+
+	if (dma_rsc->dma_ch_size < 0 ||
+	    dma_rsc->dma_ch_size >= MAX_PRU_DMA_CHANS) {
+		dev_err(dev, "custom dma resource has more DMA channels then allowed (%u)\n", dma_rsc->dma_ch_size);
+		return -EINVAL;
+	}
+
+	/* parse and fill in system event to interrupt channel mapping */
+	for (i = 0; i < dma_rsc->dma_ch_size; i++) {
+
+		dev_dbg(dev, "handling dma_ch %d  buf_addr = %d buf_size = %d edma_channel = %d param_slot = %d\n",
+				i,
+				dma_rsc->dma_ch[i].buf_addr,
+				dma_rsc->dma_ch[i].buf_size,
+				dma_rsc->dma_ch[i].edma_channel,
+				dma_rsc->dma_ch[i].param_slot
+				);
+
+		buf_size = dma_rsc->dma_ch[i].buf_size;
+		notify_completion = dma_rsc->dma_ch[i].notify_completion;
+
+		pru_dma = pru_dma_get("pru-dma");
+
+		if (IS_ERR(pru_dma)) {
+			ret = PTR_ERR(pru_dma);
+			if (ret != -EPROBE_DEFER)
+				dev_err(dev, "Unable to get pru_dma handle.\n");
+			return ret;
+		}
+
+		if ((ret = pru_dma_buffer_setup(pru_dma, &buf_addr, buf_size, notify_completion, i))) {
+			dev_err(dev, "Error while setting up DMA buffer %u\n", i);
+			return ret;
+		}
+
+		dma_rsc->dma_ch[i].buf_addr = buf_addr;
+
+		pru_dma_put(pru_dma);
+	}
+
+	return 0;
+}
+
 /* PRU-specific post loading custom resource handler */
 static int pru_rproc_handle_custom_rsc(struct rproc *rproc,
 				       struct fw_rsc_custom *rsc)
@@ -634,6 +696,11 @@ static int pru_rproc_handle_custom_rsc(struct rproc *rproc,
 						(struct fw_rsc_custom_intrmap *)
 						rsc->data);
 		break;
+	case PRUSS_RSC_DMA:
+		ret = pru_handle_custom_dma_channels(rproc,
+						(struct fw_rsc_custom_dma_ch *)
+						rsc->data);
+		break;
 	default:
 		dev_err(dev, "%s: handling unknown type %d\n", __func__,
 			rsc->sub_type);
diff --git a/drivers/remoteproc/pru_rproc.h b/drivers/remoteproc/pru_rproc.h
index 614424576323..b24e8cbb386e 100644
--- a/drivers/remoteproc/pru_rproc.h
+++ b/drivers/remoteproc/pru_rproc.h
@@ -45,7 +45,8 @@
  */
 enum pruss_rsc_types {
 	PRUSS_RSC_INTRS	= 1,
-	PRUSS_RSC_MAX	= 2,
+	PRUSS_RSC_DMA	= 2,
+	PRUSS_RSC_MAX	= 3,
 };
 
 /**
-- 
2.14.1

