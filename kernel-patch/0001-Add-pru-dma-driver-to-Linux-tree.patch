From 040768369c93d22cada841692b4a96e3ec5d981b Mon Sep 17 00:00:00 2001
From: Maciej Sobkowski <maciej@sobkow.ski>
Date: Wed, 16 Aug 2017 16:49:43 +0200
Subject: [PATCH 1/3] Add pru-dma driver to Linux tree

To use pru-dma from pru_rproc module, it needs to be present in tree
during compilation. It is also modified to support DMA channels
configuration from firmware resource table.

Signed-off-by: Maciej Sobkowski <maciej@sobkow.ski>
---
 drivers/remoteproc/Makefile  |   2 +-
 drivers/remoteproc/pru_dma.c | 294 +++++++++++++++++++++++++++++++++++++++++++
 include/linux/pru_dma.h      |  20 +++
 3 files changed, 315 insertions(+), 1 deletion(-)
 create mode 100644 drivers/remoteproc/pru_dma.c
 create mode 100644 include/linux/pru_dma.h

diff --git a/drivers/remoteproc/Makefile b/drivers/remoteproc/Makefile
index 8488f70..bfa227d 100644
--- a/drivers/remoteproc/Makefile
+++ b/drivers/remoteproc/Makefile
@@ -11,7 +11,7 @@ remoteproc-y				+= remoteproc_elf_loader.o
 obj-$(CONFIG_OMAP_REMOTEPROC)		+= omap_remoteproc.o
 obj-$(CONFIG_WKUP_M3_RPROC)		+= wkup_m3_rproc.o
 obj-$(CONFIG_DA8XX_REMOTEPROC)		+= da8xx_remoteproc.o
-obj-$(CONFIG_PRUSS_REMOTEPROC)		+= pruss_soc_bus.o pruss.o pruss_intc.o pru_rproc.o
+obj-$(CONFIG_PRUSS_REMOTEPROC)		+= pruss_soc_bus.o pruss.o pruss_intc.o pru_rproc.o pru_dma.o
 obj-$(CONFIG_KEYSTONE_REMOTEPROC)	+= keystone_remoteproc.o
 obj-$(CONFIG_QCOM_ADSP_PIL)		+= qcom_adsp_pil.o
 obj-$(CONFIG_QCOM_MDT_LOADER)		+= qcom_mdt_loader.o
diff --git a/drivers/remoteproc/pru_dma.c b/drivers/remoteproc/pru_dma.c
new file mode 100644
index 0000000..7e64895
--- /dev/null
+++ b/drivers/remoteproc/pru_dma.c
@@ -0,0 +1,294 @@
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/pruss.h>
+#include <linux/rpmsg.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/dma-mapping.h>
+#include <linux/of.h>
+#include <linux/completion.h>
+#include <linux/pru_dma.h>
+
+#define DRV_NAME "pru_dma"
+
+#define PRU_DMA_MAX_CHANS 10
+
+struct pru_dma_buf {
+	uint32_t *kbuf;
+	dma_addr_t kbuf_dma;
+	uint32_t kbuf_size;
+	uint32_t notify;
+	struct completion tx_complete;
+	uint8_t configured;
+
+};
+
+struct pru_dma {
+	struct list_head node;
+	struct device *dev;
+	struct rpmsg_device *rpdev;
+	struct pru_dma_buf buffers[PRU_DMA_MAX_CHANS];
+	char *chan_name;
+};
+
+struct edma_tx_desc {
+	uint32_t kbuf_addr;
+	uint32_t kbuf_size;
+	uint8_t  edma_slot;
+	uint8_t  edma_chan;
+	uint8_t  flags;
+};
+
+#define TX_DESC_FLAGS_NOTIFY_COMPLETION (1 << 0)
+
+#define PRU_DMA_TX_COMPLETED (uint8_t) (0x01)
+
+static DEFINE_MUTEX(pru_dma_list_mutex);
+static LIST_HEAD(pru_dma_list);
+
+uint32_t *pru_dma_get_buffer(struct pru_dma *pru_dma, int buf_num)
+{
+	return pru_dma->buffers[buf_num].kbuf;
+}
+EXPORT_SYMBOL_GPL(pru_dma_get_buffer);
+
+uint32_t pru_dma_get_buffer_size(struct pru_dma *pru_dma, int buf_num)
+{
+	return pru_dma->buffers[buf_num].kbuf_size;
+}
+EXPORT_SYMBOL_GPL(pru_dma_get_buffer_size);
+
+int pru_dma_map_buffer(struct pru_dma *pru_dma, int buf_num)
+{
+	int ret;
+	pru_dma->buffers[buf_num].kbuf_dma =
+		dma_map_single(pru_dma->dev, pru_dma->buffers[buf_num].kbuf,
+		pru_dma->buffers[buf_num].kbuf_size, DMA_BIDIRECTIONAL);
+	ret = dma_mapping_error(pru_dma->dev, pru_dma->buffers[buf_num].kbuf_dma);
+	if (ret) {
+		dev_err(pru_dma->dev, "Buffer DMA mapping failed");
+		return ret;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pru_dma_map_buffer);
+
+void pru_dma_unmap_buffer(struct pru_dma *pru_dma, int buf_num)
+{
+	dma_unmap_single(pru_dma->dev, pru_dma->buffers[buf_num].kbuf_dma,
+			pru_dma->buffers[buf_num].kbuf_size, DMA_BIDIRECTIONAL);
+}
+EXPORT_SYMBOL_GPL(pru_dma_unmap_buffer);
+
+int pru_dma_buffer_setup(struct pru_dma *pru_dma, uint32_t *buf_addr, uint32_t buf_size, uint8_t notify_completion, int buf_num)
+{
+	int ret;
+	pru_dma->buffers[buf_num].kbuf = devm_kzalloc(pru_dma->dev,
+				buf_size * sizeof(uint32_t),
+				GFP_KERNEL);
+	if (!pru_dma->buffers[buf_num].kbuf)
+		return -ENOMEM;
+
+	pru_dma->buffers[buf_num].kbuf_dma = dma_map_single(pru_dma->dev, pru_dma->buffers[buf_num].kbuf,
+			buf_size, DMA_BIDIRECTIONAL);
+	ret = dma_mapping_error(pru_dma->dev, pru_dma->buffers[buf_num].kbuf_dma);
+	if (ret) {
+		dev_err(pru_dma->dev, "Buffer DMA mapping failed");
+		return ret;
+	}
+
+	*buf_addr = pru_dma->buffers[buf_num].kbuf_dma;
+
+	pru_dma->buffers[buf_num].notify = notify_completion;
+	pru_dma->buffers[buf_num].kbuf_size = buf_size;
+	pru_dma->buffers[buf_num].configured = 1;
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pru_dma_buffer_setup);
+
+
+int pru_dma_tx_trigger(struct pru_dma *pru_dma, int buf_num)
+{
+	int ret;
+	struct edma_tx_desc tx_data;
+
+	/*
+	tx_data.kbuf_addr = pru_dma->kbuf_dma;
+	tx_data.kbuf_size = pru_dma->kbuf_size;
+	tx_data.edma_slot = pru_dma->edma_slot;
+	tx_data.edma_chan = pru_dma->edma_channel;
+	tx_data.flags     = pru_dma->notify ? (TX_DESC_FLAGS_NOTIFY_COMPLETION) : (0x00);
+	*/
+
+	dev_dbg(pru_dma->dev, "Sending msg of size %d\n", sizeof(tx_data));
+	ret = rpmsg_send(pru_dma->rpdev->ept, &tx_data, sizeof(tx_data));
+	if (ret) {
+		pr_err("rpmsg_send failed: %d\n", ret);
+		return ret;
+	}
+
+	if (pru_dma->buffers[buf_num].notify)
+		init_completion(&pru_dma->buffers[buf_num].tx_complete);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(pru_dma_tx_trigger);
+
+int pru_dma_tx_completion_wait(struct pru_dma *pru_dma, int buf_num)
+{
+	if (pru_dma->buffers[buf_num].notify) {
+		wait_for_completion(&pru_dma->buffers[buf_num].tx_complete);
+		return 0;
+	} else {
+		pr_err("TX completion notification disabled\n");
+		return -1;
+	}
+}
+EXPORT_SYMBOL_GPL(pru_dma_tx_completion_wait);
+
+struct pru_dma *pru_dma_get(char *chan_name)
+{
+	struct pru_dma *pru_dma = NULL, *p;
+
+	mutex_lock(&pru_dma_list_mutex);
+	list_for_each_entry(p, &pru_dma_list, node) {
+		if (strcmp(chan_name, p->chan_name) == 0) {
+			pru_dma = p;
+			get_device(pru_dma->dev);
+			break;
+		}
+	}
+
+	mutex_unlock(&pru_dma_list_mutex);
+
+	return pru_dma ? pru_dma : ERR_PTR(-EPROBE_DEFER);
+}
+EXPORT_SYMBOL_GPL(pru_dma_get);
+
+void pru_dma_put(struct pru_dma *pru_dma)
+{
+	if (!pru_dma)
+		return;
+
+	put_device(pru_dma->dev);
+}
+EXPORT_SYMBOL_GPL(pru_dma_put);
+
+static int pru_dma_rx_cb(struct rpmsg_device *rpdev, void *data, int len,
+						void *priv, u32 src)
+{
+	struct pru_dma *pru_dma = dev_get_drvdata(&rpdev->dev);
+
+	print_hex_dump(KERN_INFO, "incoming message:", DUMP_PREFIX_NONE,
+						16, 1, data, len, true);
+
+	/*
+	if (pru_dma->notify && len == 1 &&
+			*(uint8_t *)data == PRU_DMA_TX_COMPLETED) {
+		complete(&pru_dma->tx_complete);
+	}
+	*/
+
+	return 0;
+}
+
+static int pru_dma_probe(struct rpmsg_device *rpdev)
+{
+	struct pru_dma *pru_dma;
+	struct device_node *np = of_find_node_by_name(NULL, "pru_dma");
+	int ret;
+
+	if (!np) {
+		dev_err(&rpdev->dev, "must be instantiated via devicetree\n");
+		return -ENOENT;
+	}
+
+	pru_dma = devm_kzalloc(&rpdev->dev, sizeof(*pru_dma), GFP_KERNEL);
+	if (!pru_dma)
+		return -ENOMEM;
+
+	pru_dma->dev = &rpdev->dev;
+	pru_dma->rpdev = rpdev;
+
+	dev_set_drvdata(&rpdev->dev, pru_dma);
+
+	/*
+	ret = of_property_read_u32(np, "edma-channel", &pru_dma->edma_channel);
+	if (ret) {
+		dev_err(pru_dma->dev, "invalid edma-channel in %s\n",
+				np->full_name);
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32(np, "edma-slot", &pru_dma->edma_slot);
+	if (ret) {
+		dev_err(pru_dma->dev, "invalid edma-slot in %s\n",
+				np->full_name);
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32(np, "buffer-size", &pru_dma->kbuf_size);
+	if (ret) {
+		dev_err(pru_dma->dev, "invalid buffer-size in %s\n",
+				np->full_name);
+		return -EINVAL;
+	}
+
+	ret = of_property_read_string(np, "chan-name", &pru_dma->chan_name);
+	if (ret) {
+		dev_err(pru_dma->dev, "invalid chan-name in %s\n",
+				np->full_name);
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32(np, "notify-completion", &pru_dma->notify);
+	if (ret) {
+		dev_err(pru_dma->dev, "invalid notify-completion in %s\n",
+				np->full_name);
+		return -EINVAL;
+	}
+
+	pru_dma->kbuf = devm_kzalloc(pru_dma->dev,
+				pru_dma->kbuf_size * sizeof(uint32_t),
+				GFP_KERNEL);
+	if (!pru_dma->kbuf)
+		return -ENOMEM;
+	*/
+
+	dev_dbg(pru_dma->dev, "Probe success");
+
+	mutex_lock(&pru_dma_list_mutex);
+	list_add_tail(&pru_dma->node, &pru_dma_list);
+	mutex_unlock(&pru_dma_list_mutex);
+
+	return 0;
+}
+
+static void pru_dma_remove(struct rpmsg_device *rpdev)
+{
+	struct pru_dma *pru_dma = dev_get_drvdata(&rpdev->dev);
+
+	mutex_lock(&pru_dma_list_mutex);
+	list_del(&pru_dma->node);
+	mutex_unlock(&pru_dma_list_mutex);
+}
+
+static struct rpmsg_device_id pru_dma_id_table[] = {
+	{ .name	= "pru-dma" },
+	{ },
+};
+MODULE_DEVICE_TABLE(rpmsg, pru_dma_id_table);
+
+static struct rpmsg_driver pru_dma_driver = {
+	.drv.name	= KBUILD_MODNAME,
+	.id_table	= pru_dma_id_table,
+	.probe		= pru_dma_probe,
+	.callback	= pru_dma_rx_cb,
+	.remove		= pru_dma_remove,
+};
+module_rpmsg_driver(pru_dma_driver);
+
+MODULE_DESCRIPTION("PRU DMA driver");
+MODULE_AUTHOR("Maciej Sobkowski");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/pru_dma.h b/include/linux/pru_dma.h
new file mode 100644
index 0000000..040337b
--- /dev/null
+++ b/include/linux/pru_dma.h
@@ -0,0 +1,20 @@
+#ifndef __LINUX_PRU_DMA_H
+#define __LINUX_PRU_DMA_H
+
+struct pru_dma;
+
+struct pru_dma *pru_dma_get(char *chan_name);
+void pru_dma_put(struct pru_dma *pru_dma);
+
+uint32_t *pru_dma_get_buffer(struct pru_dma *pru_dma, int buf_num);
+uint32_t pru_dma_get_buffer_size(struct pru_dma *pru_dma, int buf_num);
+
+int pru_dma_map_buffer(struct pru_dma *pru_dma, int buf_num);
+void pru_dma_unmap_buffer(struct pru_dma *pru_dma, int buf_num);
+
+int pru_dma_buffer_setup(struct pru_dma *pru_dma, uint32_t *buf_addr, uint32_t buf_size, uint8_t notify_completion, int buf_num);
+
+int pru_dma_tx_trigger(struct pru_dma *pru_dma, int buf_num);
+int pru_dma_tx_completion_wait(struct pru_dma *pru_dma, int buf_num);
+
+#endif /* __LINUX_PRU_DMA_H */
-- 
2.14.0

